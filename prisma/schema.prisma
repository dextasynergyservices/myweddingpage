// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
<<<<<<< HEAD
<<<<<<< HEAD
=======
=======
>>>>>>> e60bc20df8a2f63d285a4cf48cf916146f7a5e9d

enum UserRole {
  USER
  ADMIN
}

enum SubscriptionStatus {
  ACTIVE
  EXPIRED
  INACTIVE
  PAID
}

enum PaymentProvider {
  STRIPE
  PAYSTACK
}

enum PaymentStatus {
  SUCCESS
  FAILED
  PENDING
}

enum MediaType {
  PHOTO
  VIDEO
}

enum ReminderType {
  TWO_WEEKS
  ONE_WEEK
  DAILY
}

model User {
  id                String        @id @default(uuid())
  email             String?        @unique
  emailVerified     DateTime?
  image             String?
  groomName         String?
  brideName         String?
  weddingDate       DateTime?
  password String?
  role              UserRole      @default(USER)
  planId            String?
  plan              Plan?         @relation(fields: [planId], references: [id])
  subscription_start DateTime?
  subscription_end   DateTime?
  status            SubscriptionStatus @default(INACTIVE)
  whatsapp           String?  @unique
  verification_code  String?
  verification_token   String?
  code_expires_at      DateTime?
  email_verified_at    DateTime?
  whatsapp_verified_at DateTime?

  created_at        DateTime      @default(now())

  accounts           Account[]
  sessions           Session[]

  weddingPages      WeddingPage[]
  payments          Payment[]
  emailReminders    EmailReminder[]
  subscriptions      Subscription[]  @relation("UserSubscriptions")
  passwordResetTokens PasswordResetToken[]
}

model Plan {
  id          String   @id @default(uuid())
  name        String
  price       Decimal
  duration_days Int
  max_photos  Int
  max_videos  Int
  max_tabs    Int
  gradient     String?
  popular      Boolean?
  created_at  DateTime @default(now())

  users       User[]
  payments    Payment[]
  subscriptions Subscription[]
}

model Payment {
  id              String          @id @default(uuid())
  userId          String
  planId          String
  amount          Decimal
  payment_provider PaymentProvider
  status          PaymentStatus
  paid_at         DateTime

  user            User   @relation(fields: [userId], references: [id])
  plan            Plan   @relation(fields: [planId], references: [id])
}

model Template {
  id            String   @id @default(uuid())
  name          String   @unique
  description   String
  thumbnail_url String
  layout_data   Json
  created_at    DateTime @default(now())

  weddingPages  WeddingPage[]
}

model WeddingPage {
  id                String   @id @default(uuid())
  userId            String
  templateId        String
  title             String
  slug              String   @unique
  ai_data           Json?
  layout_data       Json?
  color_theme       String?
  is_live           Boolean  @default(false)
  created_by_admin  Boolean  @default(false)
  created_at        DateTime @default(now())

  user              User      @relation(fields: [userId], references: [id])
  template          Template  @relation(fields: [templateId], references: [id])
  mediaUploads      MediaUpload[]
  comments          Comment[]
}

model MediaUpload {
  id              String     @id @default(uuid())
  weddingPageId   String
  type            MediaType
  cloudinary_url  String
  uploaded_at     DateTime   @default(now())

  weddingPage     WeddingPage @relation(fields: [weddingPageId], references: [id])
}

model Comment {
  id              String     @id @default(uuid())
  weddingPageId   String
  author_name     String
  text            String
  approved        Boolean    @default(false)
  created_at      DateTime   @default(now())

  weddingPage     WeddingPage @relation(fields: [weddingPageId], references: [id])
}

model EmailReminder {
  id          String        @id @default(uuid())
  userId      String
  type        ReminderType
  sent_at     DateTime

  user        User          @relation(fields: [userId], references: [id])
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id])
}
model Subscription {
  id          String   @id @default(uuid())
  email       String
  whatsapp    String
  planId      String
  userId           String?
  user             User?        @relation(fields: [userId], references: [id], name: "UserSubscriptions")
  plan        Plan     @relation(fields: [planId], references: [id])
  amount      Decimal
  status      SubscriptionStatus @default(ACTIVE)
  token       String   @unique
  paystackReference String? @unique
  expiresAt   DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  token     String   @unique
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  expires   DateTime
  createdAt DateTime @default(now())
}


<<<<<<< HEAD
>>>>>>> develop
=======
>>>>>>> e60bc20df8a2f63d285a4cf48cf916146f7a5e9d
